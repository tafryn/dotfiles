# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60

##############
# NICE BOXES #
##############
global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
	""" Parses vim's comments option to extract comment format """
	i = iter(s.split(","))

	rv = []
	try:
		while True:
			# get the flags and text of a comment part
			flags, text = next(i).split(':', 1)

			if len(flags) == 0:
				rv.append((text, text, text, ""))
			# parse 3-part comment, but ignore those with O flag
			elif flags[0] == 's' and 'O' not in flags:
				ctriple = []
				indent = ""

				if flags[-1] in string.digits:
					indent = " " * int(flags[-1])
				ctriple.append(text)

				flags,text = next(i).split(':', 1)
				assert(flags[0] == 'm')
				ctriple.append(text)

				flags,text = next(i).split(':', 1)
				assert(flags[0] == 'e')
				ctriple.append(text)
				ctriple.append(indent)

				rv.append(ctriple)
			elif flags[0] == 'b':
				if len(text) == 1:
					rv.insert(0, (text,text,text, ""))
	except StopIteration:
		return rv

def _get_comment_format():
	""" Returns a 4-element tuple representing the comment format for
	the current file. """
	return _parse_comments(vim.eval("&comments"))[0]

def make_box(twidth, bwidth=None):
	b, m, e, i = _get_comment_format()
	bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
	sline = b + m + bwidth_inner * m[0] + 2 * m[0]
	nspaces = (bwidth_inner - twidth) // 2
	mlines = i + m + " " + " " * nspaces
	mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
	eline = i + m + bwidth_inner * m[0] + 2 * m[0] + e
	return sline, mlines, mlinee, eline

def make_header(twidth, bwidth=None):
	b, m, e, i = _get_comment_format()
	fs, fe = foldmarker()
	bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
	nspaces = int(vim.eval("&ts"))
	if ( m != e ):
		hrule_endcap = e
		section_end = b + " " + fe + " " + e
	else:
		hrule_endcap = "=" * len(e)
		section_end = b + " " + fe
	header_start = b + "|" + " " * nspaces
	header_end = " " + " "*(bwidth_inner - twidth - nspaces - len(fs)) + fs
	header_rule = i + m + "|" + (bwidth_inner - len(i)) * '=' + hrule_endcap
	return header_start, header_end, header_rule, section_end

def foldmarker():
	"Return a tuple of (open fold marker, close fold marker)"
	return vim.eval("&foldmarker").split(",")

endglobal

snippet cbar "A nice section header over the full width with markers" b
`!p
width = int(vim.eval("&textwidth")) or 79
box = make_header(len(t[1]), width)
snip.rv = box[0]
`${1:Section Heading}`!p
box = make_header(len(t[1]), width)
snip.rv = box[1] + '\n' + box[2]`
$0
`!p snip.rv = _get_comment_format()[0]` `!p snip.rv = foldmarker()[1]` `!p snip.rv = _get_comment_format()[2]`
endsnippet

# vim:ft=snippets:
